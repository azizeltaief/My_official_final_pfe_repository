{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\azize\\\\OneDrive\\\\Bureau\\\\internship\\\\learning\\\\MERN_Web - Copie\\\\frontend\\\\src\\\\pages\\\\Documentation.js\",\n  _s = $RefreshSig$();\n/*import React, { useEffect } from 'react';\r\nimport githubEmbed from 'github-embed';\r\nimport 'babel-polyfill'; // Import the polyfill if not already included elsewhere in your project\r\n\r\nconst Documentation = () => {\r\n  useEffect(() => {\r\n    githubEmbed('.element', {\r\n      \"owner\": \"azizeltaief\", //\"your-github-username\"\r\n      \"repo\": \"PFE\",       //\"your-repository-name\"\r\n      \"ref\": \"main\",   //\"master\"\r\n      \"embed\": [\r\n        {\r\n          \"type\": \"htmlpage\",\r\n          \"label\": \"Embedded Wiki Page\",\r\n          \"url\": \"https://github.com/azizeltaief/PFE/wiki/Home\"   //\"https://github.com/your-github-username/your-repository-name/wiki/Your-Wiki-Page\"\r\n        }\r\n      ]\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"element\">\r\n      {/* This is where your embedded GitHub wiki page will be displayed */ /*}\r\n                                                                            </div>\r\n                                                                            );\r\n                                                                            };*/\n\n//export default Documentation;\n\n/*import React, { useState, useEffect } from 'react';\r\n\r\nconst Documentation = ({ username, repository, page }) => {\r\n  const [content, setContent] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchWikiPage = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `https://raw.githubusercontent.com/wiki/azizeltaief/PFE/Home.md`\r\n        );\r\n        if (response.ok) {\r\n          const text = await response.text();\r\n          setContent(text);\r\n        } else {\r\n          throw new Error('Failed to fetch wiki page');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching wiki page:', error);\r\n      }\r\n    };\r\n\r\n    fetchWikiPage();\r\n  }, [username, repository, page]);\r\n\r\n  return (\r\n    <div>\r\n      {/* Render the fetched wiki page content */ /*}\r\n                                                  <div dangerouslySetInnerHTML={{ __html: content }} />\r\n                                                  </div>\r\n                                                  );\r\n                                                  };\r\n                                                  export default Documentation;*/\n\n/**********import React, { useState, useEffect } from 'react';\r\n\r\nconst Documentation = ({ username, repository }) => {\r\n  const [pages, setPages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchWikiPages = async () => {\r\n      const pageNames = ['Home', 'second']; // Define the list of page names\r\n      const pagesData = [];\r\n\r\n      for (const pageName of pageNames) {\r\n        try {\r\n          const response = await fetch(\r\n            `https://raw.githubusercontent.com/wiki/azizeltaief/PFE/${pageName}.md?cacheBuster=${new Date().getTime()}`\r\n          );\r\n          if (response.ok) {\r\n            const text = await response.text();\r\n            pagesData.push({ name: pageName, content: text });\r\n          } else {\r\n            console.error(`Failed to fetch wiki page: ${pageName}`);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching wiki page:', error);\r\n        }\r\n      }\r\n\r\n      setPages(pagesData);\r\n      setLoading(false);\r\n    };\r\n\r\n\r\n    fetchWikiPages();\r\n  }, [username, repository]);\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        pages.map((page) => (\r\n          <div key={page.name}>\r\n            <h2>{page.name}</h2>\r\n            <div dangerouslySetInnerHTML={{ __html: page.content }} />\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Documentation;*******/\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Documentation = ({\n  username,\n  repository\n}) => {\n  _s();\n  const [pages, setPages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const fetchWikiPages = async () => {\n    setLoading(true); // Set loading state to true when fetching begins\n\n    const pageNames = ['Home', 'second']; // Define the list of page names\n    const pagesData = [];\n    for (const pageName of pageNames) {\n      try {\n        const response = await fetch(`https://raw.githubusercontent.com/wiki/azizeltaief/PFE/${pageName}.md?timestamp=${Date.now()}`);\n        if (response.ok) {\n          const text = await response.text();\n          pagesData.push({\n            name: pageName,\n            content: text\n          });\n          console.log(\"fetched data\");\n        } else {\n          console.error(`Failed to fetch wiki page: ${pageName}`);\n        }\n      } catch (error) {\n        console.error('Error fetching wiki page:', error);\n      }\n    }\n    setPages(pagesData);\n    setLoading(false); // Set loading state to false when fetching is complete\n  };\n  useEffect(() => {\n    fetchWikiPages(); // Initial fetch when component mounts\n  }, [username, repository]);\n  const handleRefresh = () => {\n    fetchWikiPages(); // Manually trigger fetch when Refresh button is clicked\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRefresh,\n      children: \"Refresh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this) : pages.map(page => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: page.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: page.content\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this)]\n    }, page.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(Documentation, \"q3hWbziXwnP/MVclTjWjPkY01Qg=\");\n_c = Documentation;\nexport default Documentation;\nvar _c;\n$RefreshReg$(_c, \"Documentation\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Documentation","username","repository","_s","pages","setPages","loading","setLoading","fetchWikiPages","pageNames","pagesData","pageName","response","fetch","Date","now","ok","text","push","name","content","console","log","error","handleRefresh","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","page","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/Users/azize/OneDrive/Bureau/internship/learning/MERN_Web - Copie/frontend/src/pages/Documentation.js"],"sourcesContent":["/*import React, { useEffect } from 'react';\r\nimport githubEmbed from 'github-embed';\r\nimport 'babel-polyfill'; // Import the polyfill if not already included elsewhere in your project\r\n\r\nconst Documentation = () => {\r\n  useEffect(() => {\r\n    githubEmbed('.element', {\r\n      \"owner\": \"azizeltaief\", //\"your-github-username\"\r\n      \"repo\": \"PFE\",       //\"your-repository-name\"\r\n      \"ref\": \"main\",   //\"master\"\r\n      \"embed\": [\r\n        {\r\n          \"type\": \"htmlpage\",\r\n          \"label\": \"Embedded Wiki Page\",\r\n          \"url\": \"https://github.com/azizeltaief/PFE/wiki/Home\"   //\"https://github.com/your-github-username/your-repository-name/wiki/Your-Wiki-Page\"\r\n        }\r\n      ]\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"element\">\r\n      {/* This is where your embedded GitHub wiki page will be displayed *//*}\r\n    </div>\r\n  );\r\n};*/\r\n\r\n//export default Documentation;\r\n\r\n\r\n\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\n\r\nconst Documentation = ({ username, repository, page }) => {\r\n  const [content, setContent] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchWikiPage = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `https://raw.githubusercontent.com/wiki/azizeltaief/PFE/Home.md`\r\n        );\r\n        if (response.ok) {\r\n          const text = await response.text();\r\n          setContent(text);\r\n        } else {\r\n          throw new Error('Failed to fetch wiki page');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching wiki page:', error);\r\n      }\r\n    };\r\n\r\n    fetchWikiPage();\r\n  }, [username, repository, page]);\r\n\r\n  return (\r\n    <div>\r\n      {/* Render the fetched wiki page content *//*}\r\n      <div dangerouslySetInnerHTML={{ __html: content }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Documentation;*/\r\n\r\n/**********import React, { useState, useEffect } from 'react';\r\n\r\nconst Documentation = ({ username, repository }) => {\r\n  const [pages, setPages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchWikiPages = async () => {\r\n      const pageNames = ['Home', 'second']; // Define the list of page names\r\n      const pagesData = [];\r\n\r\n      for (const pageName of pageNames) {\r\n        try {\r\n          const response = await fetch(\r\n            `https://raw.githubusercontent.com/wiki/azizeltaief/PFE/${pageName}.md?cacheBuster=${new Date().getTime()}`\r\n          );\r\n          if (response.ok) {\r\n            const text = await response.text();\r\n            pagesData.push({ name: pageName, content: text });\r\n          } else {\r\n            console.error(`Failed to fetch wiki page: ${pageName}`);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching wiki page:', error);\r\n        }\r\n      }\r\n\r\n      setPages(pagesData);\r\n      setLoading(false);\r\n    };\r\n\r\n\r\n    fetchWikiPages();\r\n  }, [username, repository]);\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        pages.map((page) => (\r\n          <div key={page.name}>\r\n            <h2>{page.name}</h2>\r\n            <div dangerouslySetInnerHTML={{ __html: page.content }} />\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Documentation;*******/\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst Documentation = ({ username, repository }) => {\r\n  const [pages, setPages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchWikiPages = async () => {\r\n    setLoading(true); // Set loading state to true when fetching begins\r\n\r\n    const pageNames = ['Home', 'second']; // Define the list of page names\r\n    const pagesData = [];\r\n\r\n    for (const pageName of pageNames) {\r\n      try {\r\n        const response = await fetch(\r\n          `https://raw.githubusercontent.com/wiki/azizeltaief/PFE/${pageName}.md?timestamp=${Date.now()}`\r\n        );\r\n        if (response.ok) {\r\n          const text = await response.text();\r\n          pagesData.push({ name: pageName, content: text });\r\n          console.log(\"fetched data\")\r\n        } else {\r\n          console.error(`Failed to fetch wiki page: ${pageName}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching wiki page:', error);\r\n      }\r\n    }\r\n\r\n    setPages(pagesData);\r\n    setLoading(false); // Set loading state to false when fetching is complete\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWikiPages(); // Initial fetch when component mounts\r\n  }, [username, repository]);\r\n\r\n  const handleRefresh = () => {\r\n    fetchWikiPages(); // Manually trigger fetch when Refresh button is clicked\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleRefresh}>Refresh</button>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        pages.map((page) => (\r\n          <div key={page.name}>\r\n            <h2>{page.name}</h2>\r\n            <div dangerouslySetInnerHTML={{ __html: page.content }} />\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Documentation;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAtBA,CAsB2E;AAC3E;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDA3BA,CA2BiD;AACjD;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,aAAa,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjCD,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;;IAElB,MAAME,SAAS,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;IACtC,MAAMC,SAAS,GAAG,EAAE;IAEpB,KAAK,MAAMC,QAAQ,IAAIF,SAAS,EAAE;MAChC,IAAI;QACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CACzB,0DAAyDF,QAAS,iBAAgBG,IAAI,CAACC,GAAG,CAAC,CAAE,EAChG,CAAC;QACD,IAAIH,QAAQ,CAACI,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC;UAClCP,SAAS,CAACQ,IAAI,CAAC;YAAEC,IAAI,EAAER,QAAQ;YAAES,OAAO,EAAEH;UAAK,CAAC,CAAC;UACjDI,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC7B,CAAC,MAAM;UACLD,OAAO,CAACE,KAAK,CAAE,8BAA6BZ,QAAS,EAAC,CAAC;QACzD;MACF,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF;IAEAlB,QAAQ,CAACK,SAAS,CAAC;IACnBH,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;EACrB,CAAC;EAEDV,SAAS,CAAC,MAAM;IACdW,cAAc,CAAC,CAAC,CAAC,CAAC;EACpB,CAAC,EAAE,CAACP,QAAQ,EAAEC,UAAU,CAAC,CAAC;EAE1B,MAAMsB,aAAa,GAAGA,CAAA,KAAM;IAC1BhB,cAAc,CAAC,CAAC,CAAC,CAAC;EACpB,CAAC;EAED,oBACET,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAQ2B,OAAO,EAAEF,aAAc;MAAAC,QAAA,EAAC;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC/CxB,OAAO,gBACNP,OAAA;MAAA0B,QAAA,EAAG;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAEjB1B,KAAK,CAAC2B,GAAG,CAAEC,IAAI,iBACbjC,OAAA;MAAA0B,QAAA,gBACE1B,OAAA;QAAA0B,QAAA,EAAKO,IAAI,CAACb;MAAI;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACpB/B,OAAA;QAAKkC,uBAAuB,EAAE;UAAEC,MAAM,EAAEF,IAAI,CAACZ;QAAQ;MAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,GAFlDE,IAAI,CAACb,IAAI;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGd,CACN,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAtDIH,aAAa;AAAAmC,EAAA,GAAbnC,aAAa;AAwDnB,eAAeA,aAAa;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}