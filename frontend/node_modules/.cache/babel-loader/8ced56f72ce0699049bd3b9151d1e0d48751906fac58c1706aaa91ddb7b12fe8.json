{"ast":null,"code":"/*import React, { useEffect } from 'react';\r\nimport githubEmbed from 'github-embed';\r\nimport 'babel-polyfill'; // Import the polyfill if not already included elsewhere in your project\r\n\r\nconst Documentation = () => {\r\n  useEffect(() => {\r\n    githubEmbed('.element', {\r\n      \"owner\": \"azizeltaief\", //\"your-github-username\"\r\n      \"repo\": \"PFE\",       //\"your-repository-name\"\r\n      \"ref\": \"main\",   //\"master\"\r\n      \"embed\": [\r\n        {\r\n          \"type\": \"htmlpage\",\r\n          \"label\": \"Embedded Wiki Page\",\r\n          \"url\": \"https://github.com/azizeltaief/PFE/wiki/Home\"   //\"https://github.com/your-github-username/your-repository-name/wiki/Your-Wiki-Page\"\r\n        }\r\n      ]\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"element\">\r\n      {/* This is where your embedded GitHub wiki page will be displayed */ /*}\r\n                                                                            </div>\r\n                                                                            );\r\n                                                                            };*/\n\n//export default Documentation;\n\n/*import React, { useState, useEffect } from 'react';\r\n\r\nconst Documentation = ({ username, repository, page }) => {\r\n  const [content, setContent] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchWikiPage = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `https://raw.githubusercontent.com/wiki/azizeltaief/PFE/Home.md`\r\n        );\r\n        if (response.ok) {\r\n          const text = await response.text();\r\n          setContent(text);\r\n        } else {\r\n          throw new Error('Failed to fetch wiki page');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching wiki page:', error);\r\n      }\r\n    };\r\n\r\n    fetchWikiPage();\r\n  }, [username, repository, page]);\r\n\r\n  return (\r\n    <div>\r\n      {/* Render the fetched wiki page content */ /*}\r\n                                                  <div dangerouslySetInnerHTML={{ __html: content }} />\r\n                                                  </div>\r\n                                                  );\r\n                                                  };\r\n                                                  export default Documentation;*/\n\n/**********import React, { useState, useEffect } from 'react';\r\n\r\nconst Documentation = ({ username, repository }) => {\r\n  const [pages, setPages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchWikiPages = async () => {\r\n      const pageNames = ['Home', 'second']; // Define the list of page names\r\n      const pagesData = [];\r\n\r\n      for (const pageName of pageNames) {\r\n        try {\r\n          const response = await fetch(\r\n            `https://raw.githubusercontent.com/wiki/azizeltaief/PFE/${pageName}.md?cacheBuster=${new Date().getTime()}`\r\n          );\r\n          if (response.ok) {\r\n            const text = await response.text();\r\n            pagesData.push({ name: pageName, content: text });\r\n          } else {\r\n            console.error(`Failed to fetch wiki page: ${pageName}`);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching wiki page:', error);\r\n        }\r\n      }\r\n\r\n      setPages(pagesData);\r\n      setLoading(false);\r\n    };\r\n\r\n\r\n    fetchWikiPages();\r\n  }, [username, repository]);\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        pages.map((page) => (\r\n          <div key={page.name}>\r\n            <h2>{page.name}</h2>\r\n            <div dangerouslySetInnerHTML={{ __html: page.content }} />\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Documentation;*******/\n\n/**************import React, { useState, useEffect } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\n\r\nconst Documentation = ({ username, repository }) => {\r\n  const [pages, setPages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [markdownContent, setMarkdownContent] = useState('');\r\n\r\n\r\n  const fetchWikiPages = async () => {\r\n    setLoading(true);\r\n\r\n    const pageNames = ['Home', 'second'];\r\n    const pagesData = [];\r\n\r\n    for (const pageName of pageNames) {\r\n      try {\r\n        const randomParam = `nocache=${Math.random()}`;\r\n        const timestamp = new Date().getTime(); // Get current timestamp\r\n        const url = `https://raw.githubusercontent.com/wiki/azizeltaief/PFE/${pageName}.md?timestamp=${timestamp}?${randomParam}`;\r\n        console.log('Fetching:', url);\r\n        const response = await fetch(url,    {\r\n          cache: 'no-store', // Disable caching on the client side\r\n        });\r\n        if (response.ok) {\r\n          const text = await response.text();\r\n          pagesData.push({ name: pageName, content: text });\r\n          console.log('Fetched data for', pageName);\r\n          console.log('text data for', text);\r\n\r\n        } else {\r\n          console.error(`Failed to fetch wiki page: ${pageName}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching wiki page:', error);\r\n      }\r\n    }\r\n\r\n    setPages(pagesData);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWikiPages();\r\n  }, [username, repository]);\r\n\r\n  const handleRefresh = () => {\r\n    fetchWikiPages();\r\n  };\r\n\r\n  console.log('Current pages:', pages); // Log current pages state for debugging\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleRefresh}>Refresh</button>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        pages.map((page) => (\r\n          <div key={page.name}>\r\n            <h2>{page.name}</h2>\r\n            <div dangerouslySetInnerHTML={{ __html: page.content }} />\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Documentation;**********/\n/***********Correct official\r\n * import React, { useState, useEffect } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nconst Documentation = ({ username, repository }) => {\r\n  const [pages, setPages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchWikiPages = async () => {\r\n    setLoading(true);\r\n\r\n    const pageNames = ['Home', 'second'];\r\n    const pagesData = [];\r\n\r\n    for (const pageName of pageNames) {\r\n      try {\r\n        const randomParam = `nocache=${Math.random()}`;\r\n        const timestamp = new Date().getTime(); // Get current timestamp\r\n        const url = `https://raw.githubusercontent.com/wiki/azizeltaief/PFE/${pageName}.md?timestamp=${timestamp}?${randomParam}`;\r\n        console.log('Fetching:', url);\r\n        const response = await fetch(url, {\r\n          cache: 'no-store', // Disable caching on the client side\r\n        });\r\n        if (response.ok) {\r\n          const text = await response.text();\r\n          pagesData.push({ name: pageName, content: text });\r\n          console.log('Fetched data for', pageName);\r\n          console.log('text data for', text);\r\n        } else {\r\n          console.error(`Failed to fetch wiki page: ${pageName}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching wiki page:', error);\r\n      }\r\n    }\r\n\r\n    setPages(pagesData);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWikiPages();\r\n  }, [username, repository]);\r\n\r\n  const handleRefresh = () => {\r\n    fetchWikiPages();\r\n  };\r\n\r\n  console.log('Current pages:', pages); // Log current pages state for debugging\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleRefresh}>Refresh</button>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        pages.map((page) => (\r\n          <div key={page.name}>\r\n            <h2>{page.name}</h2>\r\n            <ReactMarkdown>{page.content}</ReactMarkdown>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Documentation;*******************/","map":{"version":3,"names":[],"sources":["C:/Users/azize/OneDrive/Bureau/internship/learning/MERN_Web - Copie/frontend/src/pages/Documentation.js"],"sourcesContent":["/*import React, { useEffect } from 'react';\r\nimport githubEmbed from 'github-embed';\r\nimport 'babel-polyfill'; // Import the polyfill if not already included elsewhere in your project\r\n\r\nconst Documentation = () => {\r\n  useEffect(() => {\r\n    githubEmbed('.element', {\r\n      \"owner\": \"azizeltaief\", //\"your-github-username\"\r\n      \"repo\": \"PFE\",       //\"your-repository-name\"\r\n      \"ref\": \"main\",   //\"master\"\r\n      \"embed\": [\r\n        {\r\n          \"type\": \"htmlpage\",\r\n          \"label\": \"Embedded Wiki Page\",\r\n          \"url\": \"https://github.com/azizeltaief/PFE/wiki/Home\"   //\"https://github.com/your-github-username/your-repository-name/wiki/Your-Wiki-Page\"\r\n        }\r\n      ]\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"element\">\r\n      {/* This is where your embedded GitHub wiki page will be displayed *//*}\r\n    </div>\r\n  );\r\n};*/\r\n\r\n//export default Documentation;\r\n\r\n\r\n\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\n\r\nconst Documentation = ({ username, repository, page }) => {\r\n  const [content, setContent] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchWikiPage = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `https://raw.githubusercontent.com/wiki/azizeltaief/PFE/Home.md`\r\n        );\r\n        if (response.ok) {\r\n          const text = await response.text();\r\n          setContent(text);\r\n        } else {\r\n          throw new Error('Failed to fetch wiki page');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching wiki page:', error);\r\n      }\r\n    };\r\n\r\n    fetchWikiPage();\r\n  }, [username, repository, page]);\r\n\r\n  return (\r\n    <div>\r\n      {/* Render the fetched wiki page content *//*}\r\n      <div dangerouslySetInnerHTML={{ __html: content }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Documentation;*/\r\n\r\n/**********import React, { useState, useEffect } from 'react';\r\n\r\nconst Documentation = ({ username, repository }) => {\r\n  const [pages, setPages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchWikiPages = async () => {\r\n      const pageNames = ['Home', 'second']; // Define the list of page names\r\n      const pagesData = [];\r\n\r\n      for (const pageName of pageNames) {\r\n        try {\r\n          const response = await fetch(\r\n            `https://raw.githubusercontent.com/wiki/azizeltaief/PFE/${pageName}.md?cacheBuster=${new Date().getTime()}`\r\n          );\r\n          if (response.ok) {\r\n            const text = await response.text();\r\n            pagesData.push({ name: pageName, content: text });\r\n          } else {\r\n            console.error(`Failed to fetch wiki page: ${pageName}`);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching wiki page:', error);\r\n        }\r\n      }\r\n\r\n      setPages(pagesData);\r\n      setLoading(false);\r\n    };\r\n\r\n\r\n    fetchWikiPages();\r\n  }, [username, repository]);\r\n\r\n\r\n  \r\n  return (\r\n    <div>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        pages.map((page) => (\r\n          <div key={page.name}>\r\n            <h2>{page.name}</h2>\r\n            <div dangerouslySetInnerHTML={{ __html: page.content }} />\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Documentation;*******/\r\n\r\n/**************import React, { useState, useEffect } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\n\r\nconst Documentation = ({ username, repository }) => {\r\n  const [pages, setPages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [markdownContent, setMarkdownContent] = useState('');\r\n\r\n\r\n  const fetchWikiPages = async () => {\r\n    setLoading(true);\r\n\r\n    const pageNames = ['Home', 'second'];\r\n    const pagesData = [];\r\n\r\n    for (const pageName of pageNames) {\r\n      try {\r\n        const randomParam = `nocache=${Math.random()}`;\r\n        const timestamp = new Date().getTime(); // Get current timestamp\r\n        const url = `https://raw.githubusercontent.com/wiki/azizeltaief/PFE/${pageName}.md?timestamp=${timestamp}?${randomParam}`;\r\n        console.log('Fetching:', url);\r\n        const response = await fetch(url,    {\r\n          cache: 'no-store', // Disable caching on the client side\r\n        });\r\n        if (response.ok) {\r\n          const text = await response.text();\r\n          pagesData.push({ name: pageName, content: text });\r\n          console.log('Fetched data for', pageName);\r\n          console.log('text data for', text);\r\n\r\n        } else {\r\n          console.error(`Failed to fetch wiki page: ${pageName}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching wiki page:', error);\r\n      }\r\n    }\r\n\r\n    setPages(pagesData);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWikiPages();\r\n  }, [username, repository]);\r\n\r\n  const handleRefresh = () => {\r\n    fetchWikiPages();\r\n  };\r\n\r\n  console.log('Current pages:', pages); // Log current pages state for debugging\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleRefresh}>Refresh</button>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        pages.map((page) => (\r\n          <div key={page.name}>\r\n            <h2>{page.name}</h2>\r\n            <div dangerouslySetInnerHTML={{ __html: page.content }} />\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Documentation;**********/\r\n/***********Correct official\r\n * import React, { useState, useEffect } from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nconst Documentation = ({ username, repository }) => {\r\n  const [pages, setPages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchWikiPages = async () => {\r\n    setLoading(true);\r\n\r\n    const pageNames = ['Home', 'second'];\r\n    const pagesData = [];\r\n\r\n    for (const pageName of pageNames) {\r\n      try {\r\n        const randomParam = `nocache=${Math.random()}`;\r\n        const timestamp = new Date().getTime(); // Get current timestamp\r\n        const url = `https://raw.githubusercontent.com/wiki/azizeltaief/PFE/${pageName}.md?timestamp=${timestamp}?${randomParam}`;\r\n        console.log('Fetching:', url);\r\n        const response = await fetch(url, {\r\n          cache: 'no-store', // Disable caching on the client side\r\n        });\r\n        if (response.ok) {\r\n          const text = await response.text();\r\n          pagesData.push({ name: pageName, content: text });\r\n          console.log('Fetched data for', pageName);\r\n          console.log('text data for', text);\r\n        } else {\r\n          console.error(`Failed to fetch wiki page: ${pageName}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching wiki page:', error);\r\n      }\r\n    }\r\n\r\n    setPages(pagesData);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWikiPages();\r\n  }, [username, repository]);\r\n\r\n  const handleRefresh = () => {\r\n    fetchWikiPages();\r\n  };\r\n\r\n  console.log('Current pages:', pages); // Log current pages state for debugging\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleRefresh}>Refresh</button>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        pages.map((page) => (\r\n          <div key={page.name}>\r\n            <h2>{page.name}</h2>\r\n            <ReactMarkdown>{page.content}</ReactMarkdown>\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Documentation;*******************/\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAtBA,CAsB2E;AAC3E;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDA3BA,CA2BiD;AACjignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}