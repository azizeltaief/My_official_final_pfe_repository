{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\azize\\\\OneDrive\\\\Bureau\\\\internship\\\\learning\\\\MERN_Web - Copie\\\\frontend\\\\src\\\\pages\\\\Profile.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './css/Profile.css'; // Import CSS file for styling\nimport user_image1 from './images/user_image1.jpg';\nimport { useAuthContext } from '../hooks/useAuthContext';\nimport { useEffect, useState } from 'react';\nimport { useUserContext } from '../hooks/useUserContext';\nimport ProfileComponent from '../components/ProfileComponent';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  /*const [scripts, setScripts] = useState(null) we no longer need it we'll use context*/\n  const {\n    users,\n    dispatch\n  } = useUserContext();\n  const {\n    user\n  } = useAuthContext();\n\n  /*  useEffect(() => {\r\n      const updateUser = async () => {\r\n        if (user && updatedUser) { // Check if there's a logged-in user and an updated user\r\n          const response = await fetch(`/api/user/${updatedUser._id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              // 'Authorization': `Bearer ${user.token}`, // Uncomment and include if you have authentication headers\r\n            },\r\n            body: JSON.stringify(updatedUser), // Assuming updatedUser contains the updated user data\r\n          });\r\n    \r\n          const json = await response.json();\r\n    \r\n          if (response.ok) { // If the update request is successful\r\n            dispatch({ type: 'UPDATE_USER', payload: json }); // Update the user context state with the updated user\r\n            console.log('User updated successfully');\r\n          } else {\r\n            console.error('Failed to update user:', json.message); // Log any error messages\r\n          }\r\n        }\r\n      };\r\n    \r\n      updateUser(); // Call the updateUser function when the component mounts or when user or updatedUser changes\r\n    }, [dispatch, user, updatedUser]); // Add user and updatedUser to the dependency array\r\n  ****************** */\n  useEffect(() => {\n    const updateUser = async () => {\n      const response = await fetch('/api/user' /*, {\r\n                                               headers: {'Authorization': `Bearer ${user.token}`},\r\n                                               }*/);\n      const json = await response.json(); //json type's is array of objects each object is a script we use .json() to transform a JSON-formatted array of JavaScript objects to array of Javascript objects      \n      if (response.ok) {\n        //if we get the data back successfully\n        /*setScripts(json)   //update the state variable script with the fetched data (json). Updating the state triggers a re-render of the component, allowing you to display or work with the fetched data in your React component.\r\n        console.log(\"ok\")*/\n        dispatch({\n          type: 'UPDATE_USER',\n          payload: json\n        });\n      }\n    };\n    if (user) {\n      //if we have a user we will fetch the scripts if not we will not fetch it\n      updateUser();\n    }\n  }, [dispatch, user]); //we want it to be rendered only the first time \n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ProfileComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 3\n    }, this)\n  }, void 0, false);\n};\n_s(Profile, \"vEiyVBKtFCdN8QFg3uEtAwpMFlU=\", false, function () {\n  return [useUserContext, useAuthContext];\n});\n_c = Profile;\nexport default Users;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","user_image1","useAuthContext","useEffect","useState","useUserContext","ProfileComponent","jsxDEV","_jsxDEV","Fragment","_Fragment","Profile","_s","users","dispatch","user","updateUser","response","fetch","json","ok","type","payload","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Users","$RefreshReg$"],"sources":["C:/Users/azize/OneDrive/Bureau/internship/learning/MERN_Web - Copie/frontend/src/pages/Profile.js"],"sourcesContent":["import React from 'react';\r\nimport './css/Profile.css'; // Import CSS file for styling\r\nimport user_image1 from './images/user_image1.jpg'\r\nimport { useAuthContext } from '../hooks/useAuthContext';\r\nimport { useEffect,useState } from 'react';\r\nimport { useUserContext } from '../hooks/useUserContext';\r\nimport ProfileComponent from '../components/ProfileComponent';\r\n\r\nconst Profile = () => {\r\n    /*const [scripts, setScripts] = useState(null) we no longer need it we'll use context*/\r\n    const {users,dispatch} = useUserContext();\r\n    const {user} = useAuthContext()\r\n\r\n  /*  useEffect(() => {\r\n      const updateUser = async () => {\r\n        if (user && updatedUser) { // Check if there's a logged-in user and an updated user\r\n          const response = await fetch(`/api/user/${updatedUser._id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              // 'Authorization': `Bearer ${user.token}`, // Uncomment and include if you have authentication headers\r\n            },\r\n            body: JSON.stringify(updatedUser), // Assuming updatedUser contains the updated user data\r\n          });\r\n    \r\n          const json = await response.json();\r\n    \r\n          if (response.ok) { // If the update request is successful\r\n            dispatch({ type: 'UPDATE_USER', payload: json }); // Update the user context state with the updated user\r\n            console.log('User updated successfully');\r\n          } else {\r\n            console.error('Failed to update user:', json.message); // Log any error messages\r\n          }\r\n        }\r\n      };\r\n    \r\n      updateUser(); // Call the updateUser function when the component mounts or when user or updatedUser changes\r\n    }, [dispatch, user, updatedUser]); // Add user and updatedUser to the dependency array\r\n****************** */\r\n    useEffect( ()=>\r\n    {\r\n      const updateUser = async ()=>{\r\n        const response = await fetch('/api/user'/*, {\r\n          headers: {'Authorization': `Bearer ${user.token}`},\r\n        }*/)\r\n        const json = await response.json()  //json type's is array of objects each object is a script we use .json() to transform a JSON-formatted array of JavaScript objects to array of Javascript objects      \r\n        if(response.ok){ //if we get the data back successfully\r\n          /*setScripts(json)   //update the state variable script with the fetched data (json). Updating the state triggers a re-render of the component, allowing you to display or work with the fetched data in your React component.\r\n          console.log(\"ok\")*/\r\n          dispatch({type:'UPDATE_USER', payload:json})\r\n\r\n        }\r\n            \r\n      }\r\n      if (user) { //if we have a user we will fetch the scripts if not we will not fetch it\r\n        updateUser()\r\n\r\n  \r\n      }\r\n    },[  dispatch, user]) //we want it to be rendered only the first time \r\n\r\n\r\n  return (\r\n  <>\r\n  <ProfileComponent/>\r\n\r\n\r\n\r\n\r\n\r\n\r\n  </>\r\n  );\r\n\r\n};\r\nexport default Users;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,mBAAmB,CAAC,CAAC;AAC5B,OAAOC,WAAW,MAAM,0BAA0B;AAClD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,SAAS,EAACC,QAAQ,QAAQ,OAAO;AAC1C,SAASC,cAAc,QAAQ,yBAAyB;AACxD,OAAOC,gBAAgB,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9D,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB;EACA,MAAM;IAACC,KAAK;IAACC;EAAQ,CAAC,GAAGT,cAAc,CAAC,CAAC;EACzC,MAAM;IAACU;EAAI,CAAC,GAAGb,cAAc,CAAC,CAAC;;EAEjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,SAAS,CAAE,MACX;IACE,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAU;MAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW;AAChD;AACA,kDAAW,CAAC;MACJ,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC,EAAE;MACpC,IAAGF,QAAQ,CAACG,EAAE,EAAC;QAAE;QACf;AACV;QACUN,QAAQ,CAAC;UAACO,IAAI,EAAC,aAAa;UAAEC,OAAO,EAACH;QAAI,CAAC,CAAC;MAE9C;IAEF,CAAC;IACD,IAAIJ,IAAI,EAAE;MAAE;MACVC,UAAU,CAAC,CAAC;IAGd;EACF,CAAC,EAAC,CAAGF,QAAQ,EAAEC,IAAI,CAAC,CAAC,EAAC;;EAGxB,oBACAP,OAAA,CAAAE,SAAA;IAAAa,QAAA,eACAf,OAAA,CAACF,gBAAgB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC,gBAOjB,CAAC;AAGL,CAAC;AAACf,EAAA,CAlEID,OAAO;EAAA,QAEgBN,cAAc,EACxBH,cAAc;AAAA;AAAA0B,EAAA,GAH3BjB,OAAO;AAmEb,eAAekB,KAAK;AAAC,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}