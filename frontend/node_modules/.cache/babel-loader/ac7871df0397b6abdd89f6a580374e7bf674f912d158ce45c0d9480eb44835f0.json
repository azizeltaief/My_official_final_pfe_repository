{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\azize\\\\OneDrive\\\\Bureau\\\\internship\\\\learning\\\\MERN_Web - Copie\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useScriptContext } from \"../hooks/useScriptContext\";\nimport { useAuthContext } from \"../hooks/useAuthContext\";\nimport React from 'react';\n//import { GitHubEmbed } from 'react-github-embed';\nimport '../index.css';\n\n//components\nimport ScriptDetails from \"../components/ScriptDetails\";\nimport ScriptForm from \"../components/ScriptForm\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  /*const [scripts, setScripts] = useState(null) we no longer need it we'll use context*/\n  const {\n    scripts,\n    dispatch\n  } = useScriptContext();\n  const {\n    user\n  } = useAuthContext();\n  useEffect(() => {\n    const fetchScripts = async () => {\n      const response = await fetch('/api/scripts', {\n        headers: {\n          'Authorization': `Bearer ${user.token}`\n        }\n      });\n      const json = await response.json(); //json type's is array of objects each object is a script we use .json() to transform a JSON-formatted array of JavaScript objects to array of Javascript objects      \n      if (response.ok) {\n        //if we get the data back successfully\n        /*setScripts(json)   //update the state variable script with the fetched data (json). Updating the state triggers a re-render of the component, allowing you to display or work with the fetched data in your React component.\r\n        console.log(\"ok\")*/\n        dispatch({\n          type: 'SET_SCRIPTS',\n          payload: json\n        });\n      }\n    };\n    if (user) {\n      //if we have a user we will fetch the scripts if not we will not fetch it\n      fetchScripts();\n    }\n  }, [dispatch, user]); //we want it to be rendered only the first time \n\n  //only when it's has value(it's updated from null the initial value to setScripts) we wanna map throught Scripts\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: user.userType === 'admin' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scripts\",\n        children: scripts && scripts.map(script => /*#__PURE__*/_jsxDEV(ScriptDetails, {\n          script: script\n        }, script._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ScriptForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"Y9b/xsqAVz+ZCATtckc6hdSvNzY=\", false, function () {\n  return [useScriptContext, useAuthContext];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useScriptContext","useAuthContext","React","ScriptDetails","ScriptForm","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","scripts","dispatch","user","fetchScripts","response","fetch","headers","token","json","ok","type","payload","className","children","userType","map","script","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/azize/OneDrive/Bureau/internship/learning/MERN_Web - Copie/frontend/src/pages/Home.js"],"sourcesContent":["import { useEffect } from \"react\"\r\nimport { useScriptContext } from \"../hooks/useScriptContext\"\r\nimport { useAuthContext } from \"../hooks/useAuthContext\"\r\nimport React from 'react';\r\n//import { GitHubEmbed } from 'react-github-embed';\r\nimport '../index.css'\r\n\r\n//components\r\nimport ScriptDetails from \"../components/ScriptDetails\"\r\nimport ScriptForm from \"../components/ScriptForm\"\r\n\r\n\r\nconst Home = () =>{\r\n  /*const [scripts, setScripts] = useState(null) we no longer need it we'll use context*/\r\n  const {scripts,dispatch} = useScriptContext();\r\n  const {user} = useAuthContext()\r\n  useEffect( ()=>\r\n  {\r\n    const fetchScripts = async ()=>{\r\n      const response = await fetch('/api/scripts', {\r\n        headers: {'Authorization': `Bearer ${user.token}`},\r\n      })\r\n      const json = await response.json()  //json type's is array of objects each object is a script we use .json() to transform a JSON-formatted array of JavaScript objects to array of Javascript objects      \r\n      if(response.ok){ //if we get the data back successfully\r\n        /*setScripts(json)   //update the state variable script with the fetched data (json). Updating the state triggers a re-render of the component, allowing you to display or work with the fetched data in your React component.\r\n        console.log(\"ok\")*/\r\n        dispatch({type:'SET_SCRIPTS', payload:json})\r\n\r\n      }\r\n          \r\n    }\r\n    if (user) { //if we have a user we will fetch the scripts if not we will not fetch it\r\n      fetchScripts()\r\n\r\n    }\r\n  },[dispatch, user]) //we want it to be rendered only the first time \r\n\r\n\r\n  //only when it's has value(it's updated from null the initial value to setScripts) we wanna map throught Scripts\r\n  return(\r\n    <div className=\"home\">\r\n    {user.userType === 'admin' && (\r\n      <>\r\n      <div className=\"scripts\">\r\n      {scripts && scripts.map(script => (\r\n        <ScriptDetails script={script} key={script._id} />\r\n      ))}\r\n      </div>\r\n      <ScriptForm />\r\n     </>\r\n\r\n  \r\n\r\n\r\n\r\n     \r\n     \r\n     \r\n     \r\n     \r\n     )}     \r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Home"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,SAASC,cAAc,QAAQ,yBAAyB;AACxD,OAAOC,KAAK,MAAM,OAAO;AACzB;AACA,OAAO,cAAc;;AAErB;AACA,OAAOC,aAAa,MAAM,6BAA6B;AACvD,OAAOC,UAAU,MAAM,0BAA0B;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGjD,MAAMC,IAAI,GAAGA,CAAA,KAAK;EAAAC,EAAA;EAChB;EACA,MAAM;IAACC,OAAO;IAACC;EAAQ,CAAC,GAAGZ,gBAAgB,CAAC,CAAC;EAC7C,MAAM;IAACa;EAAI,CAAC,GAAGZ,cAAc,CAAC,CAAC;EAC/BF,SAAS,CAAE,MACX;IACE,MAAMe,YAAY,GAAG,MAAAA,CAAA,KAAU;MAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAc,EAAE;QAC3CC,OAAO,EAAE;UAAC,eAAe,EAAG,UAASJ,IAAI,CAACK,KAAM;QAAC;MACnD,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,CAAC,CAAC,EAAE;MACpC,IAAGJ,QAAQ,CAACK,EAAE,EAAC;QAAE;QACf;AACR;QACQR,QAAQ,CAAC;UAACS,IAAI,EAAC,aAAa;UAAEC,OAAO,EAACH;QAAI,CAAC,CAAC;MAE9C;IAEF,CAAC;IACD,IAAIN,IAAI,EAAE;MAAE;MACVC,YAAY,CAAC,CAAC;IAEhB;EACF,CAAC,EAAC,CAACF,QAAQ,EAAEC,IAAI,CAAC,CAAC,EAAC;;EAGpB;EACA,oBACEP,OAAA;IAAKiB,SAAS,EAAC,MAAM;IAAAC,QAAA,EACpBX,IAAI,CAACY,QAAQ,KAAK,OAAO,iBACxBnB,OAAA,CAAAE,SAAA;MAAAgB,QAAA,gBACAlB,OAAA;QAAKiB,SAAS,EAAC,SAAS;QAAAC,QAAA,EACvBb,OAAO,IAAIA,OAAO,CAACe,GAAG,CAACC,MAAM,iBAC5BrB,OAAA,CAACH,aAAa;UAACwB,MAAM,EAAEA;QAAO,GAAMA,MAAM,CAACC,GAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAClD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC,eACN1B,OAAA,CAACF,UAAU;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACb;EAWD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEZ,CAAC;AAAAtB,EAAA,CAnDKD,IAAI;EAAA,QAEmBT,gBAAgB,EAC5BC,cAAc;AAAA;AAAAgC,EAAA,GAHzBxB,IAAI;AAqDV,eAAeA,IAAI;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}