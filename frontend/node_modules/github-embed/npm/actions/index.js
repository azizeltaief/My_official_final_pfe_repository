'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.setLoaded = setLoaded;
exports.activateFrame = activateFrame;
exports.initialize = initialize;

var _githubUrlParse = require('github-url-parse');

var _githubUrlParse2 = _interopRequireDefault(_githubUrlParse);

var _constants = require('../constants');

var types = _interopRequireWildcard(_constants);

var _getGithubFile = require('../lib/get-github-file');

var _getGithubFile2 = _interopRequireDefault(_getGithubFile);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var errorTimeout = void 0;

function pureError(errorText) {
    return {
        type: types.ERROR,
        error: errorText
    };
}

function error(errorText) {
    return function (dispatch) {
        clearTimeout(errorTimeout);
        dispatch(pureError(errorText ? '' + errorText : ''));
        errorTimeout = setTimeout(function () {
            dispatch(pureError(null));
        }, 5000);
    };
}

function embed(settings) {
    return {
        type: types.EMBED,
        settings: settings
    };
}

function setCodeContent(index, code) {
    return {
        type: types.SET_CODE_CONTENT,
        code: code,
        index: index
    };
}

function loadFrame(index) {
    return {
        type: types.LOAD_FRAME,
        index: index
    };
}

function showFrame(index) {
    return {
        type: types.SHOW_FRAME,
        index: index
    };
}

function setSettings(settings) {
    return {
        type: types.SET_SETTINGS,
        settings: settings
    };
}

function setLoaded(loaded) {
    return {
        type: types.SET_LOADED,
        loaded: loaded
    };
}

function activateFrame(index) {
    var _this = this;

    return function () {
        var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(dispatch, getState) {
            var _getState, frames, settings, item, code;

            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _getState = getState(), frames = _getState.frames, settings = _getState.settings;
                            item = frames[index];

                            if (!item.loaded) {
                                _context.next = 4;
                                break;
                            }

                            return _context.abrupt('return', dispatch(showFrame(index)));

                        case 4:

                            dispatch(setLoaded(false));
                            dispatch(error(null));

                            if (!(item.type === 'htmlpage')) {
                                _context.next = 11;
                                break;
                            }

                            dispatch(loadFrame(index));
                            dispatch(showFrame(index));
                            _context.next = 26;
                            break;

                        case 11:
                            _context.prev = 11;
                            _context.next = 14;
                            return (0, _getGithubFile2.default)({
                                path: item.path,
                                owner: item.owner || settings.owner,
                                repo: item.repo || settings.repo,
                                ref: item.ref || settings.ref
                            });

                        case 14:
                            code = _context.sent;


                            dispatch(setCodeContent(index, code));
                            dispatch(loadFrame(index));
                            dispatch(showFrame(index));
                            dispatch(setLoaded(true));
                            _context.next = 26;
                            break;

                        case 21:
                            _context.prev = 21;
                            _context.t0 = _context['catch'](11);

                            dispatch(setLoaded(true));
                            dispatch(error(_context.t0));
                            throw _context.t0;

                        case 26:
                            return _context.abrupt('return', undefined);

                        case 27:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, _this, [[11, 21]]);
        }));

        return function (_x, _x2) {
            return _ref.apply(this, arguments);
        };
    }();
}

function initializeRemoteSettings(settingsPath) {
    var _this2 = this;

    return function () {
        var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(dispatch) {
            var _gitHubUrlParse, relativeSettingsPath, repo, owner, ref, settingsString, settingsObject;

            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _gitHubUrlParse = (0, _githubUrlParse2.default)(settingsPath), relativeSettingsPath = _gitHubUrlParse.path, repo = _gitHubUrlParse.repo, owner = _gitHubUrlParse.user, ref = _gitHubUrlParse.branch;


                            dispatch(setLoaded(false));

                            settingsString = void 0;
                            settingsObject = void 0;
                            _context2.prev = 4;
                            _context2.next = 7;
                            return (0, _getGithubFile2.default)({
                                owner: owner,
                                ref: ref,
                                repo: repo,
                                path: relativeSettingsPath
                            });

                        case 7:
                            settingsString = _context2.sent;
                            _context2.next = 15;
                            break;

                        case 10:
                            _context2.prev = 10;
                            _context2.t0 = _context2['catch'](4);

                            dispatch(setLoaded(true));
                            dispatch(error(_context2.t0));
                            throw _context2.t0;

                        case 15:
                            _context2.prev = 15;

                            settingsObject = JSON.parse(settingsString);
                            dispatch(setSettings(Object.assign(settingsObject, {
                                owner: owner,
                                ref: ref,
                                repo: repo,
                                relativeSettingsPath: relativeSettingsPath
                            })));
                            _context2.next = 25;
                            break;

                        case 20:
                            _context2.prev = 20;
                            _context2.t1 = _context2['catch'](15);

                            dispatch(setLoaded(true));
                            dispatch(error('Cannot parse settings file (' + _context2.t1 + ')'));
                            throw _context2.t1;

                        case 25:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, _this2, [[4, 10], [15, 20]]);
        }));

        return function (_x3) {
            return _ref2.apply(this, arguments);
        };
    }();
}

function initialize(settings) {
    var _this3 = this;

    return function () {
        var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(dispatch, getState) {
            var _getState2, frames, activeIndex;

            return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            if (!(typeof settings === 'string')) {
                                _context3.next = 5;
                                break;
                            }

                            _context3.next = 3;
                            return dispatch(initializeRemoteSettings(settings));

                        case 3:
                            _context3.next = 6;
                            break;

                        case 5:
                            dispatch(setSettings(settings));

                        case 6:

                            dispatch(embed());

                            _getState2 = getState(), frames = _getState2.frames;
                            activeIndex = frames.findIndex(function (item) {
                                return item.active;
                            });

                            activeIndex = activeIndex === -1 ? 0 : activeIndex;
                            dispatch(activateFrame(activeIndex));

                        case 11:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, _this3);
        }));

        return function (_x4, _x5) {
            return _ref3.apply(this, arguments);
        };
    }();
}
;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(errorTimeout, 'errorTimeout', 'src/actions/index.js');

    __REACT_HOT_LOADER__.register(pureError, 'pureError', 'src/actions/index.js');

    __REACT_HOT_LOADER__.register(error, 'error', 'src/actions/index.js');

    __REACT_HOT_LOADER__.register(embed, 'embed', 'src/actions/index.js');

    __REACT_HOT_LOADER__.register(setCodeContent, 'setCodeContent', 'src/actions/index.js');

    __REACT_HOT_LOADER__.register(loadFrame, 'loadFrame', 'src/actions/index.js');

    __REACT_HOT_LOADER__.register(showFrame, 'showFrame', 'src/actions/index.js');

    __REACT_HOT_LOADER__.register(setSettings, 'setSettings', 'src/actions/index.js');

    __REACT_HOT_LOADER__.register(setLoaded, 'setLoaded', 'src/actions/index.js');

    __REACT_HOT_LOADER__.register(activateFrame, 'activateFrame', 'src/actions/index.js');

    __REACT_HOT_LOADER__.register(initializeRemoteSettings, 'initializeRemoteSettings', 'src/actions/index.js');

    __REACT_HOT_LOADER__.register(initialize, 'initialize', 'src/actions/index.js');
}();

;