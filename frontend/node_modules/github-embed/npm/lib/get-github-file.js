'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var makeDirectRequest = function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(reqInfo) {
        var owner, repo, path, ref, resp;
        return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        owner = reqInfo.owner, repo = reqInfo.repo, path = reqInfo.path, ref = reqInfo.ref;
                        _context.next = 3;
                        return fetch('https://raw.githubusercontent.com/' + owner + '/' + repo + '/' + ref + '/' + path);

                    case 3:
                        resp = _context.sent;
                        return _context.abrupt('return', resp.text());

                    case 5:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function makeDirectRequest(_x) {
        return _ref.apply(this, arguments);
    };
}();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(reqInfo) {
        var owner, repo, path, ref, resp;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        owner = reqInfo.owner, repo = reqInfo.repo, path = reqInfo.path, ref = reqInfo.ref;
                        resp = void 0;
                        _context2.prev = 2;
                        _context2.next = 5;
                        return fetch('https://api.github.com/repos/' + owner + '/' + repo + '/contents/' + path + '?ref=' + ref, {
                            headers: {
                                Accept: 'application/vnd.github.VERSION.raw'
                            }
                        });

                    case 5:
                        resp = _context2.sent;
                        _context2.next = 11;
                        break;

                    case 8:
                        _context2.prev = 8;
                        _context2.t0 = _context2['catch'](2);
                        return _context2.abrupt('return', makeDirectRequest(reqInfo));

                    case 11:
                        if (!(resp.status !== 200)) {
                            _context2.next = 13;
                            break;
                        }

                        return _context2.abrupt('return', makeDirectRequest(reqInfo));

                    case 13:
                        return _context2.abrupt('return', resp.text());

                    case 14:
                    case 'end':
                        return _context2.stop();
                }
            }
        }, _callee2, this, [[2, 8]]);
    }));

    function getGithubFile(_x2) {
        return _ref2.apply(this, arguments);
    }

    return getGithubFile;
}();

;

var _temp = function () {
    if (typeof __REACT_HOT_LOADER__ === 'undefined') {
        return;
    }

    __REACT_HOT_LOADER__.register(makeDirectRequest, 'makeDirectRequest', 'src/lib/get-github-file.js');
}();

;